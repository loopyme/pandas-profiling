import warnings
from pathlib import Path
from typing import Union

import pandas as pd

from pandas_profiling.config import Config
from pandas_profiling.report.presentation.abstract.renderable import Renderable
from pandas_profiling.report.presentation.core import Root
from pandas_profiling.version import __version__


class Serialize(object):
    df_hash = None
    df = None
    _report = None
    _description_set = None
    _title = None
    config: Config

    def dumps(self) -> bytes:
        """
        Serialize ProfileReport and return bytes for reproducing ProfileReport or Caching.

        Returns:
            Bytes which contains hash of DataFrame, config, _description_set and _report
        """
        import pickle

        # Note: _description_set and _report may are None if they haven't been computed
        return pickle.dumps(
            [
                self.df_hash,
                self.config,
                self._description_set,
                self._report,
                self._title,
            ]
        )

    def loads(self, data: bytes, ignore_config: bool = False):
        """
        Deserialize the bytes for reproducing ProfileReport or Caching.

        Args:
            data: The bytes of a serialize ProfileReport object.
            ignore_config: If set True, the config of current ProfileReport will be overwrite. Or it will check
                            whether if config matched

        Notes:
            Load will fail if DataFrame unmatched or config unmatched (while ignore_config is False)

        Returns:
            self
        """
        import pickle

        try:
            # load the bytes
            (
                df_hash,
                loaded_config,
                loaded_description_set,
                loaded_report,
                loaded_title,
            ) = pickle.loads(data)
        except Exception as e:
            raise ValueError(f"Fail to load data:{e}")

        # check if the loaded objects is what we want
        if not all(
            (
                isinstance(df_hash, int),
                loaded_title is None or isinstance(loaded_title, str),
                isinstance(loaded_config, Config),
                loaded_description_set is None
                or isinstance(loaded_description_set, dict),
                loaded_report is None or isinstance(loaded_report, Root),
            )
        ):
            raise ValueError(
                f"Fail to load data: It may be damaged or from other version"
            )
        if (df_hash == self.df_hash) and (
            ignore_config
            or self.config == loaded_config
            or (
                self.config.is_default and self.df is None
            )  # load to an empty ProfileReport
        ):
            # Set description_set, report, sample if they are Noneï¼Œor raise an warning.
            if self._description_set is None:
                self._description_set = loaded_description_set
            else:
                warnings.warn(
                    f"The description set of current ProfileReport is not None. It won't be overwrite."
                )
            if self._report is None:
                self._report = loaded_report
            else:
                warnings.warn(
                    f"The report of current ProfileReport is not None. It won't be overwrite."
                )

            # overwrite config if ignore_config set to True
            if ignore_config:
                self.config.update(loaded_config)

            # warn if version not equal
            if (
                loaded_description_set is not None
                and loaded_description_set["package"]["pandas_profiling_version"]
                != __version__
            ):
                warnings.warn(
                    f"Version unmatched from the loaded data. Currently running on pandas_profiling {__version__} "
                    f"while loaded data is generated by pandas_profiling "
                    f"{loaded_description_set['package']['pandas_profiling_version']}. "
                    f"It may have some potential risk."
                )

            # set df_hash and title
            self._df_hash = df_hash
            self._title = loaded_title

        else:
            raise ValueError(
                "DataFrame of Config is not match. If you want to overwrite current config, "
                'try "ignore_config=True"'
            )
        return self

    def dump(self, output_file: Union[Path, str]):
        """
        Dump ProfileReport to file
        """
        if not isinstance(output_file, Path):
            output_file = Path(str(output_file))

        output_file = output_file.with_suffix(".pp")
        output_file.write_bytes(self.dumps())

    def load(self, load_file: Union[Path, str], ignore_config: bool = False):
        """
       Load ProfileReport from file

       Notes:
            Load will fail if DataFrame or config unmatched
       """
        if not isinstance(load_file, Path):
            load_file = Path(str(load_file))

        self.loads(load_file.read_bytes(), ignore_config=ignore_config)
        return self
